<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on 星期日, 七月 16, 2017, 7:05 下午 -->
<!-- MuClient version 5.05 -->

<!-- Plugin "GetFullmeImage" generated by Plugin Wizard -->

<!--
Get Fullme image and save it to the disk
-->

<muclient>
<plugin
   name="GetFullmeImage"
   author="potato"
   id="49d60313904dfdbd24b9bb30"
   language="Lua"
   purpose="Get Fullme image and save it to the disk"
   date_written="2017-07-16 18:41:46"
   requires="5.05"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Load Plugin GetFullmeImage
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="E:\games\mud\MUSHclient\worlds\plugins\constants.lua"/>

<!--  Triggers  -->

<triggers>

</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   script="test_download_image_from_web"
   match="testdi"
   enabled="y"
   group="group"
   sequence="100"
  >
  <send>haha</send>
  </alias>
  <alias
   script="change_image_dir"
   match="cid"
   enabled="y"
   group="group"
   sequence="100"
  >
  <send>hehe</send>
  </alias>
</aliases>

<!--  Timers  -->

<timers>
  <timer enabled="y" minute="8" second="0.00" offset_second="0.00" >
  <send>hpbrief</send>

  </timer>
</timers>

<!--  Script  -->

<script>
<![CDATA[

require 'lfs'
-- -- -- -- -- -- -- -- -- --
-- -- -- -- -- -- -- -- -- --
GLOBAL_CURRENT_DIR = nil
GLOBAL_WORK_PATH = "E:\\program\\recognize_image"
-- -- -- -- -- -- -- -- -- --
-- -- -- -- -- -- -- -- -- --
function get_html_entire_text(from_web_url)
	
	local html_entire_text
	
	assert (package.loadlib ("luacom.dll","luacom_open")) ()

	oXMLHTTP = assert (luacom.CreateObject ("MSXML2.XMLHTTP.3.0"), "cannot open MSXML2.XMLHTTP.3.0")

	--oXMLHTTP:Open("GET", from_web_url, false)
	oXMLHTTP:Open("POST", from_web_url, false)
	
	oXMLHTTP:setRequestHeader("User-Agent", "Mozilla/4.0")
	oXMLHTTP:Send()

	if oXMLHTTP.readyState == 4 and oXMLHTTP.Status == 200 then
		html_entire_text = oXMLHTTP.responseText
	end -- if

	oXMLHTTP = nil
	
	return html_entire_text
	
end -- get_html_entire_text()

-- -- -- -- -- -- -- -- -- --

function get_jpg_url(from_html_text)

	if from_html_text == nil or from_html_text == "" then
		return nil
	end -- if
	
	local html_text, jpg_url
	
	local html_length = string.len(from_html_text)

	if html_length >= 277 then
		
		jpg_url = string.match(from_html_text, "/b2evo_captcha_tmp.-jpg")
		jpg_url = "http://pkuxkx.net/antirobot" .. jpg_url
		
	else
		jpg_url = nil
		close_window()
		Note("\n本插件靠“fullme”触发。“fullme验证码图片”仅在之后的1分钟内输入有效。")
		Note("本插件不能正确获得Web页面文件。\n")	
	end -- if
	
	--print(jpg_url)

	return jpg_url
end -- get_jpg_url()

-- -- -- -- -- -- -- -- -- --

function download_jpg(from_jpg_url)

	local oXMLHTTP
	local jpg_buffer
	
	assert (package.loadlib (GLOBAL_WORK_PATH.."\\luacom.dll","luacom_open")) ()

	oXMLHTTP = assert (luacom.CreateObject ("MSXML2.XMLHTTP.3.0"), "cannot open MSXML2.XMLHTTP.3.0")

	oXMLHTTP:Open("GET", from_jpg_url, false)
	oXMLHTTP:setRequestHeader("User-Agent", "Mozilla/4.0")
	oXMLHTTP:Send()

	if oXMLHTTP.readyState == 4 and oXMLHTTP.Status == 200 then
	
		jpg_buffer = oXMLHTTP.responseBody
 		
	end -- if

	oXMLHTTP = nil
	
	return jpg_buffer
end -- download_jpg()

function down_fullme_code_from_web(web_url)

	GLOBAL_URL = web_url

	local jpg, png = nil

	local html_entire_text = get_html_entire_text(web_url) -- get the html text as a string from the url.

	local jpg_url = get_jpg_url(html_entire_text) -- get the .jpg file's url from the html text.
	
	if html_entire_text ~= nil and jpg_url ~= nil then
	
		jpg = download_jpg(jpg_url) -- download the .jpg file from the jpg's url, and save it as a variable in memeory.
		
		if jpg ~= nil then
            local jpg_name = string.match(jpg_url, "[%w%-_]+%.jpg")
            local fullFileName = GLOBAL_WORK_PATH..jpg_name
            local file = io.open(fullFileName,"wb")
            file:write(jpg)
            file:close()
		else
			Note("无法获得 fullme 图片。")
		end --if
	
	else
		
		Note("本次查询无法获得页面/文件。")
		
	end -- if html_entire_text ~= nil and jpg_url ~= nil
	
	jpg, png = nil

end -- down_fullme_code_from_web(web_url)

function change_image_dir()
    local subdir_name=get_random_str(GLOBAL_WORK_PATH)
    local fullFileName = GLOBAL_WORK_PATH.."\\"..subdir_name
    Note("fullFileName="..fullFileName)
    local res,err=lfs.mkdir(fullFileName)
    if(res==true) then
        GLOBAL_CURRENT_DIR=subdir_name
    else
      Note("mkdir err="..err)
    end
end --change_image_dir

function test_download_image_from_web()

	local jpg = nil

	local jpg_url = "http://img1qn.moko.cc/2017-07-11/638693bb-fcee-4fe6-b551-8b5fcb78817a.jpg" -- get the .jpg file's url from the html text.

    jpg = download_jpg(jpg_url) -- download the .jpg file from the jpg's url, and save it as a variable in memeory.
    
    if jpg ~= nil and GLOBAL_CURRENT_DIR ~= nil then
        local curr_dir = GLOBAL_WORK_PATH.."\\"..GLOBAL_CURRENT_DIR
        local jpg_name,ext = string.match(jpg_url, "/([%w%-_]+)%.(jpg)")
        local new_name = get_random_file_name(curr_dir,jpg_name,ext)
        local fullFileName = curr_dir.."\\"..new_name.."\."..ext
        local file,err = io.open(fullFileName,"wb")
        file:write(jpg)
        file:close()
    else
    	Note("无法保存fullme 图片。")
    	if jpg ==nil then
    	    Note("jpg ==nil")
    	end
    	if GLOBAL_CURRENT_DIR ==nil then
    	    Note("GLOBAL_CURRENT_DIR ==nil")
    	end			
    end --if
    
    jpg = nil

end -- test_download_image_from_web(web_url)

function file_exists(path)
  local fileinfo,err = lfs.attributes(path)
  return fileinfo ~= nil
end --file_exists(path)

function get_random_str(pre_path)
    math.randomseed(tostring(os.time()):reverse():sub(1, 6)) 
    local random_str=tostring(math.random(100000))
    local fullFileName = pre_path.."\\"..random_str
    while (file_exists(fullFileName)==true)
    do
        math.randomseed(tostring(os.time()):reverse():sub(1, 6))
        random_str=tostring(math.random(100000))
        fullFileName = pre_path.."\\"..random_str
    end
    return random_str
end --get_random_str

function get_random_file_name(pre_path,file_name,ext_name)
    local new_name=file_name
    local fullFileName = pre_path.."\\"..new_name.."."..ext_name
    while (file_exists(fullFileName)==true)
    do
        math.randomseed(tostring(os.time()):reverse():sub(1, 6))
        new_name=tostring(math.random(100000))
        fullFileName = pre_path.."\\"..new_name.."\."..ext_name
    end
    return new_name
end --get_random_file_name

]]>
</script> 


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="GetFullmeImage:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
